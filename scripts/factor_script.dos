/*
参数：
    start_date: 开始日期
    end_date: 结束日期
    start_time: 开始时间
    end_time: 结束时间
    seconds: 时间桶大小
    job_id: 作业ID
    factor_name: 因子名称
    portion: 强信号占比
    database: 数据库名
    table_name: 表名
*/
def calc_fft_ratio(volumes) {
    // 1. 去掉首尾数据点（根据需求决定是否保留此操作）
    real_volume = volumes[2:size(volumes)-1]  
    n = size(real_volume)
    // 2. 处理空数据情况
    if (n == 0) { return 0.0 }
    // 3. 执行FFT（使用全部数据）
    fft_result = signal::fft(real_volume)
    amplitude = signal::abs(fft_result)  // 计算振幅
    // 4. 计算有效频谱长度（对称性，只需取前半部分）
    n_valid = n / 2 + 1  // 实数FFT的共轭对称性
    valid_amp = amplitude[0:n_valid]
    // 5. 计算前20%强信号
    top_10_len = max(1, floor(n_valid * {portion})) // 0.2
    total_amp = sum(valid_amp)
    if (total_amp == 0) { return 0.0 }
    // 6. 降序排序取强信号
    sorted_amp = valid_amp.sort(false)  // false表示降序
    top_sum = sum(sorted_amp[0:top_10_len])
    return top_sum / total_amp
}

// 因子计算主函数
def factor_crowd_fftv10(NumTrades, date_time, code) {
    stock_code = code[0]
    trade_date = date(date_time[0])
    
    // 创建30秒时间桶
    ts_n_seconds = temporalAdd(date_time, {seconds}, "s") // 30
    
    // 按30秒聚合交易笔数
    aggData = select 
                sum(NumTrades) as NumTrades30s 
                from table(NumTrades as NumTrades, ts_n_seconds as ts_n_seconds) 
                group by ts_n_seconds 
                order by ts_n_seconds
    
    // 计算FFT特征值 - 使用新的强信号占比函数
    fft_ratio = calc_fft_ratio(aggData.NumTrades30s)
    
    return fft_ratio
}

// 主任务函数
def factor_job(){
    tab = loadTable('dfs://{database}', "{table_name}") // dfs://tonglian_level2, snapshot
    
    corrPM_day = select factor_crowd_fftv10(NumTrades, date_time, code) as factor 
                 from tab 
                 where date(date_time) between {start_date} : {end_date} // 2019.03.20
                 and time(date_time) between {start_time} : {end_time} // 09:30:00.000 : 14:57:00.000
                 group by code, date(date_time) as day_date
                 order by day_date, code
    
    return corrPM_day
}

// 提交作业并获取结果
job1_ID = submitJobEx("{job_id}", "{factor_name}", 4, 128, factor_job);
result = getJobReturn(job1_ID, true);
result